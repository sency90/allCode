'\" t
.TH QTimeEdit 3qt "5 August 2004" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QTimeEdit \- Time editor
.SH SYNOPSIS
\fC#include <qdatetimeedit.h>\fR
.PP
Inherits QDateTimeEditBase.
.PP
.SS "Public Members"
.in +1c
<li class=fn>enum \fBDisplay\fR { Hours = 0x01, Minutes = 0x02, Seconds = 0x04, AMPM = 0x10 } <li class=fn>\fBQTimeEdit\fR ( QWidget * parent = 0, const char * name = 0 ) <li class=fn>\fBQTimeEdit\fR ( const QTime & time, QWidget * parent = 0, const char * name = 0 ) <li class=fn>\fB~QTimeEdit\fR () <li class=fn>QTime \fBtime\fR () const <li class=fn>virtual void \fBsetAutoAdvance\fR ( bool advance ) <li class=fn>bool \fBautoAdvance\fR () const <li class=fn>virtual void \fBsetMinValue\fR ( const QTime & d ) <li class=fn>QTime \fBminValue\fR () const <li class=fn>virtual void \fBsetMaxValue\fR ( const QTime & d ) <li class=fn>QTime \fBmaxValue\fR () const <li class=fn>virtual void \fBsetRange\fR ( const QTime & min, const QTime & max ) <li class=fn>QString \fBseparator\fR () const <li class=fn>virtual void \fBsetSeparator\fR ( const QString & s ) <li class=fn>uint \fBdisplay\fR () const <li class=fn>void \fBsetDisplay\fR ( uint disp )
.in -1c
.SS "Public Slots"
.in +1c
<li class=fn>virtual void \fBsetTime\fR ( const QTime & time )
.in -1c
.SS "Signals"
.in +1c
<li class=fn>void \fBvalueChanged\fR ( const QTime & time )
.in -1c
.SS "Properties"
.in +1c
<li class=fn>bool \fBautoAdvance\fR - whether the editor automatically advances to the next section <li class=fn>Display \fBdisplay\fR - the sections that are displayed in the time edit <li class=fn>QTime \fBmaxValue\fR - the maximum time value <li class=fn>QTime \fBminValue\fR - the minimum time value <li class=fn>QTime \fBtime\fR - the editor's time value
.in -1c
.SS "Protected Members"
.in +1c
<li class=fn>virtual QString \fBsectionFormattedText\fR ( int sec ) <li class=fn>virtual void \fBsetHour\fR ( int h ) <li class=fn>virtual void \fBsetMinute\fR ( int m ) <li class=fn>virtual void \fBsetSecond\fR ( int s )
.in -1c
.SH DESCRIPTION
The QTimeEdit class provides a time editor.
.PP
QTimeEdit allows the user to edit times by using the keyboard or the arrow keys to increase/decrease time values. The arrow keys can be used to move from section to section within the QTimeEdit box. The user can automatically be moved to the next section once they complete a section using setAutoAdvance(). Times appear in hour, minute, second order. It is recommended that the QTimeEdit is initialised with a time, e.g.
.PP
.nf
.br
    QTime timeNow = QTime::currentTime();
.br
    QTimeEdit *timeEdit = new QTimeEdit( timeNow, this );
.br
    timeEdit->setRange( timeNow, timeNow.addSecs( 60 * 60 ) );
.br
.fi
Here we've created a QTimeEdit widget set to the current time. We've also set the minimum value to the current time and the maximum time to one hour from now.
.PP
The maximum and minimum values for a time value in the time editor default to the maximum and minimum values for a QTime. You can change this by calling setMinValue(), setMaxValue() or setRange().
.PP
Terminology: A QTimeWidget consists of three sections, one each for the hour, minute and second. You can change the separator character using setSeparator(), by default the separator is read from the system's settings.
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center>
.PP
See also QTime, QDateEdit, QDateTimeEdit, Advanced Widgets, and Time and Date.
.SS "Member Type Documentation"
.SH "QTimeEdit::Display"
This enum defines the sections that comprise a time
.TP
\fCQTimeEdit::Hours\fR - The hours section
.TP
\fCQTimeEdit::Minutes\fR - The minutes section
.TP
\fCQTimeEdit::Seconds\fR - The seconds section
.TP
\fCQTimeEdit::AMPM\fR - The AM/PM section
.PP
The values can be or'ed together to show any combination.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QTimeEdit::QTimeEdit ( QWidget * parent = 0, const char * name = 0 )"
Constructs an empty time edit with parent \fIparent\fR and called \fIname\fR.
.SH "QTimeEdit::QTimeEdit ( const QTime & time, QWidget * parent = 0, const char * name = 0 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Constructs a time edit with the initial time value, \fItime\fR, parent \fIparent\fR and called \fIname\fR.
.SH "QTimeEdit::~QTimeEdit ()"
Destroys the object and frees any allocated resources.
.SH "bool QTimeEdit::autoAdvance () const"
Returns TRUE if the editor automatically advances to the next section; otherwise returns FALSE. See the "autoAdvance" property for details.
.SH "uint QTimeEdit::display () const"
Returns the sections that are displayed in the time edit. See the "display" property for details.
.SH "QTime QTimeEdit::maxValue () const"
Returns the maximum time value. See the "maxValue" property for details.
.SH "QTime QTimeEdit::minValue () const"
Returns the minimum time value. See the "minValue" property for details.
.SH "QString QTimeEdit::sectionFormattedText ( int sec )\fC [virtual protected]\fR"
Returns the formatted number for section \fIsec\fR. This will correspond to either the hour, minute or second section, depending on \fIsec\fR.
.SH "QString QTimeEdit::separator () const"
Returns the editor's separator.
.SH "void QTimeEdit::setAutoAdvance ( bool advance )\fC [virtual]\fR"
Sets whether the editor automatically advances to the next section to \fIadvance\fR. See the "autoAdvance" property for details.
.SH "void QTimeEdit::setDisplay ( uint disp )"
Sets the sections that are displayed in the time edit to \fIdisp\fR. See the "display" property for details.
.SH "void QTimeEdit::setHour ( int h )\fC [virtual protected]\fR"
Sets the hour to \fIh\fR, which must be a valid hour, i.e. in the range 0..24.
.SH "void QTimeEdit::setMaxValue ( const QTime & d )\fC [virtual]\fR"
Sets the maximum time value to \fId\fR. See the "maxValue" property for details.
.SH "void QTimeEdit::setMinValue ( const QTime & d )\fC [virtual]\fR"
Sets the minimum time value to \fId\fR. See the "minValue" property for details.
.SH "void QTimeEdit::setMinute ( int m )\fC [virtual protected]\fR"
Sets the minute to \fIm\fR, which must be a valid minute, i.e. in the range 0..59.
.SH "void QTimeEdit::setRange ( const QTime & min, const QTime & max )\fC [virtual]\fR"
Sets the valid input range for the editor to be from \fImin\fR to \fImax\fR inclusive. If \fImin\fR is invalid no minimum time is set. Similarly, if \fImax\fR is invalid no maximum time is set.
.SH "void QTimeEdit::setSecond ( int s )\fC [virtual protected]\fR"
Sets the second to \fIs\fR, which must be a valid second, i.e. in the range 0..59.
.SH "void QTimeEdit::setSeparator ( const QString & s )\fC [virtual]\fR"
Sets the separator to \fIs\fR. Note that currently only the first character of \fIs\fR is used.
.SH "void QTimeEdit::setTime ( const QTime & time )\fC [virtual slot]\fR"
Sets the editor's time value to \fItime\fR. See the "time" property for details.
.SH "QTime QTimeEdit::time () const"
Returns the editor's time value. See the "time" property for details.
.SH "void QTimeEdit::valueChanged ( const QTime & time )\fC [signal]\fR"
This signal is emitted whenever the editor's value changes. The \fItime\fR parameter is the new value.
.SS "Property Documentation"
.SH "bool autoAdvance"
This property holds whether the editor automatically advances to the next section.
.PP
If autoAdvance is TRUE, the editor will automatically advance focus to the next time section if a user has completed a section. The default is FALSE.
.PP
Set this property's value with setAutoAdvance() and get this property's value with autoAdvance().
.SH "Display display"
This property holds the sections that are displayed in the time edit.
.PP
The value can be any combination of the values in the Display enum. By default, the widget displays hours, minutes and seconds.
.PP
Set this property's value with setDisplay() and get this property's value with display().
.SH "QTime maxValue"
This property holds the maximum time value.
.PP
Setting the maximum time value is equivalent to calling QTimeEdit::setRange( minValue(), \fIt\fR ), where \fIt\fR is the maximum time. The default maximum time is 23:59:59.
.PP
See also minValue and setRange().
.PP
Set this property's value with setMaxValue() and get this property's value with maxValue().
.SH "QTime minValue"
This property holds the minimum time value.
.PP
Setting the minimum time value is equivalent to calling QTimeEdit::setRange( \fIt\fR, maxValue() ), where \fIt\fR is the minimum time. The default minimum time is 00:00:00.
.PP
See also maxValue and setRange().
.PP
Set this property's value with setMinValue() and get this property's value with minValue().
.SH "QTime time"
This property holds the editor's time value.
.PP
When changing the time property, if the time is less than minValue(), or is greater than maxValue(), nothing happens.
.PP
Set this property's value with setTime() and get this property's value with time().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qtimeedit.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qtimeedit.3qt) and the Qt
version (3.3.3).
