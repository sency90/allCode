/****************************************************************************
** QDockWindowResizeHandle meta object code from reading C++ file 'qdockwindow.cpp'
**
** Created: Fri Jun 3 22:09:51 2016
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.3   edited Aug 5 16:40 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *QDockWindowResizeHandle::className() const
{
    return "QDockWindowResizeHandle";
}

QMetaObject *QDockWindowResizeHandle::metaObj = 0;
static QMetaObjectCleanUp cleanUp_QDockWindowResizeHandle( "QDockWindowResizeHandle", &QDockWindowResizeHandle::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString QDockWindowResizeHandle::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QDockWindowResizeHandle", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString QDockWindowResizeHandle::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QDockWindowResizeHandle", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* QDockWindowResizeHandle::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QWidget::staticMetaObject();
    metaObj = QMetaObject::new_metaobject(
	"QDockWindowResizeHandle", parentObject,
	0, 0,
	0, 0,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_QDockWindowResizeHandle.setMetaObject( metaObj );
    return metaObj;
}

void* QDockWindowResizeHandle::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "QDockWindowResizeHandle" ) )
	return this;
    return QWidget::qt_cast( clname );
}

bool QDockWindowResizeHandle::qt_invoke( int _id, QUObject* _o )
{
    return QWidget::qt_invoke(_id,_o);
}

bool QDockWindowResizeHandle::qt_emit( int _id, QUObject* _o )
{
    return QWidget::qt_emit(_id,_o);
}
#ifndef QT_NO_PROPERTIES

bool QDockWindowResizeHandle::qt_property( int id, int f, QVariant* v)
{
    return QWidget::qt_property( id, f, v);
}

bool QDockWindowResizeHandle::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


#include <qvariant.h>
const char *QDockWindowHandle::className() const
{
    return "QDockWindowHandle";
}

QMetaObject *QDockWindowHandle::metaObj = 0;
static QMetaObjectCleanUp cleanUp_QDockWindowHandle( "QDockWindowHandle", &QDockWindowHandle::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString QDockWindowHandle::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QDockWindowHandle", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString QDockWindowHandle::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QDockWindowHandle", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* QDockWindowHandle::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QWidget::staticMetaObject();
    static const QUMethod slot_0 = {"minimize", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "minimize()", &slot_0, QMetaData::Private }
    };
    static const QUMethod signal_0 = {"doubleClicked", 0, 0 };
    static const QMetaData signal_tbl[] = {
	{ "doubleClicked()", &signal_0, QMetaData::Public }
    };
#ifndef QT_NO_PROPERTIES
    static const QMetaProperty props_tbl[1] = {
 	{ "QString","caption", 0x3000001, &QDockWindowHandle::metaObj, 0, -1 }
    };
#endif // QT_NO_PROPERTIES
    metaObj = QMetaObject::new_metaobject(
	"QDockWindowHandle", parentObject,
	slot_tbl, 1,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	props_tbl, 1,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_QDockWindowHandle.setMetaObject( metaObj );
    return metaObj;
}

void* QDockWindowHandle::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "QDockWindowHandle" ) )
	return this;
    return QWidget::qt_cast( clname );
}

// SIGNAL doubleClicked
void QDockWindowHandle::doubleClicked()
{
    activate_signal( staticMetaObject()->signalOffset() + 0 );
}

bool QDockWindowHandle::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: minimize(); break;
    default:
	return QWidget::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool QDockWindowHandle::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: doubleClicked(); break;
    default:
	return QWidget::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool QDockWindowHandle::qt_property( int id, int f, QVariant* v)
{
    switch ( id - staticMetaObject()->propertyOffset() ) {
    case 0: switch( f ) {
	case 1: *v = QVariant( this->caption() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    default:
	return QWidget::qt_property( id, f, v );
    }
    return TRUE;
}

bool QDockWindowHandle::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *QDockWindowTitleBar::className() const
{
    return "QDockWindowTitleBar";
}

QMetaObject *QDockWindowTitleBar::metaObj = 0;
static QMetaObjectCleanUp cleanUp_QDockWindowTitleBar( "QDockWindowTitleBar", &QDockWindowTitleBar::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString QDockWindowTitleBar::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QDockWindowTitleBar", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString QDockWindowTitleBar::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QDockWindowTitleBar", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* QDockWindowTitleBar::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QTitleBar::staticMetaObject();
    metaObj = QMetaObject::new_metaobject(
	"QDockWindowTitleBar", parentObject,
	0, 0,
	0, 0,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_QDockWindowTitleBar.setMetaObject( metaObj );
    return metaObj;
}

void* QDockWindowTitleBar::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "QDockWindowTitleBar" ) )
	return this;
    return QTitleBar::qt_cast( clname );
}

bool QDockWindowTitleBar::qt_invoke( int _id, QUObject* _o )
{
    return QTitleBar::qt_invoke(_id,_o);
}

bool QDockWindowTitleBar::qt_emit( int _id, QUObject* _o )
{
    return QTitleBar::qt_emit(_id,_o);
}
#ifndef QT_NO_PROPERTIES

bool QDockWindowTitleBar::qt_property( int id, int f, QVariant* v)
{
    return QTitleBar::qt_property( id, f, v);
}

bool QDockWindowTitleBar::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
