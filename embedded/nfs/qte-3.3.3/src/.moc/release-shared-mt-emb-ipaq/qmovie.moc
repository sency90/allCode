/****************************************************************************
** QMoviePrivate meta object code from reading C++ file 'qmovie.cpp'
**
** Created: Fri Jun 3 22:09:28 2016
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.3   edited Aug 5 16:40 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *QMoviePrivate::className() const
{
    return "QMoviePrivate";
}

QMetaObject *QMoviePrivate::metaObj = 0;
static QMetaObjectCleanUp cleanUp_QMoviePrivate( "QMoviePrivate", &QMoviePrivate::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString QMoviePrivate::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QMoviePrivate", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString QMoviePrivate::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QMoviePrivate", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* QMoviePrivate::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QObject::staticMetaObject();
    static const QUMethod slot_0 = {"refresh", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "refresh()", &slot_0, QMetaData::Public }
    };
    static const QUParameter param_signal_0[] = {
	{ 0, &static_QUType_varptr, "\x09", QUParameter::In }
    };
    static const QUMethod signal_0 = {"sizeChanged", 1, param_signal_0 };
    static const QUParameter param_signal_1[] = {
	{ 0, &static_QUType_varptr, "\x08", QUParameter::In }
    };
    static const QUMethod signal_1 = {"areaChanged", 1, param_signal_1 };
    static const QUParameter param_signal_2[] = {
	{ 0, &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod signal_2 = {"dataStatus", 1, param_signal_2 };
    static const QMetaData signal_tbl[] = {
	{ "sizeChanged(const QSize&)", &signal_0, QMetaData::Public },
	{ "areaChanged(const QRect&)", &signal_1, QMetaData::Public },
	{ "dataStatus(int)", &signal_2, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"QMoviePrivate", parentObject,
	slot_tbl, 1,
	signal_tbl, 3,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_QMoviePrivate.setMetaObject( metaObj );
    return metaObj;
}

void* QMoviePrivate::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "QMoviePrivate" ) )
	return this;
    if ( !qstrcmp( clname, "QShared" ) )
	return (QShared*)this;
    if ( !qstrcmp( clname, "QDataSink" ) )
	return (QDataSink*)this;
    if ( !qstrcmp( clname, "QImageConsumer" ) )
	return (QImageConsumer*)this;
    return QObject::qt_cast( clname );
}

#include <qobjectdefs.h>
#include <qsignalslotimp.h>

// SIGNAL sizeChanged
void QMoviePrivate::sizeChanged( const QSize& t0 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 0 );
    if ( !clist )
	return;
    QUObject o[2];
    static_QUType_varptr.set(o+1,&t0);
    activate_signal( clist, o );
}

// SIGNAL areaChanged
void QMoviePrivate::areaChanged( const QRect& t0 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 1 );
    if ( !clist )
	return;
    QUObject o[2];
    static_QUType_varptr.set(o+1,&t0);
    activate_signal( clist, o );
}

// SIGNAL dataStatus
void QMoviePrivate::dataStatus( int t0 )
{
    activate_signal( staticMetaObject()->signalOffset() + 2, t0 );
}

bool QMoviePrivate::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: refresh(); break;
    default:
	return QObject::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool QMoviePrivate::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: sizeChanged((const QSize&)*((const QSize*)static_QUType_ptr.get(_o+1))); break;
    case 1: areaChanged((const QRect&)*((const QRect*)static_QUType_ptr.get(_o+1))); break;
    case 2: dataStatus((int)static_QUType_int.get(_o+1)); break;
    default:
	return QObject::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool QMoviePrivate::qt_property( int id, int f, QVariant* v)
{
    return QObject::qt_property( id, f, v);
}

bool QMoviePrivate::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
