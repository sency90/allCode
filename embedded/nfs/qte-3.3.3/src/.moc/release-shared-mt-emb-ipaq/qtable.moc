/****************************************************************************
** QTableHeader meta object code from reading C++ file 'qtable.cpp'
**
** Created: Fri Jun 3 22:10:40 2016
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.3   edited Aug 5 16:40 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *QTableHeader::className() const
{
    return "QTableHeader";
}

QMetaObject *QTableHeader::metaObj = 0;
static QMetaObjectCleanUp cleanUp_QTableHeader( "QTableHeader", &QTableHeader::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString QTableHeader::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QTableHeader", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString QTableHeader::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QTableHeader", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* QTableHeader::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QHeader::staticMetaObject();
    static const QUMethod slot_0 = {"doAutoScroll", 0, 0 };
    static const QUParameter param_slot_1[] = {
	{ "col", &static_QUType_int, 0, QUParameter::In },
	{ "os", &static_QUType_int, 0, QUParameter::In },
	{ "ns", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_1 = {"sectionWidthChanged", 3, param_slot_1 };
    static const QUParameter param_slot_2[] = {
	{ "sec", &static_QUType_int, 0, QUParameter::In },
	{ "oldIdx", &static_QUType_int, 0, QUParameter::In },
	{ "newIdx", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_2 = {"indexChanged", 3, param_slot_2 };
    static const QUMethod slot_3 = {"updateStretches", 0, 0 };
    static const QUMethod slot_4 = {"updateWidgetStretches", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "doAutoScroll()", &slot_0, QMetaData::Private },
	{ "sectionWidthChanged(int,int,int)", &slot_1, QMetaData::Private },
	{ "indexChanged(int,int,int)", &slot_2, QMetaData::Private },
	{ "updateStretches()", &slot_3, QMetaData::Private },
	{ "updateWidgetStretches()", &slot_4, QMetaData::Private }
    };
    static const QUParameter param_signal_0[] = {
	{ "s", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod signal_0 = {"sectionSizeChanged", 1, param_signal_0 };
    static const QMetaData signal_tbl[] = {
	{ "sectionSizeChanged(int)", &signal_0, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"QTableHeader", parentObject,
	slot_tbl, 5,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_QTableHeader.setMetaObject( metaObj );
    return metaObj;
}

void* QTableHeader::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "QTableHeader" ) )
	return this;
    return QHeader::qt_cast( clname );
}

// SIGNAL sectionSizeChanged
void QTableHeader::sectionSizeChanged( int t0 )
{
    activate_signal( staticMetaObject()->signalOffset() + 0, t0 );
}

bool QTableHeader::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: doAutoScroll(); break;
    case 1: sectionWidthChanged((int)static_QUType_int.get(_o+1),(int)static_QUType_int.get(_o+2),(int)static_QUType_int.get(_o+3)); break;
    case 2: indexChanged((int)static_QUType_int.get(_o+1),(int)static_QUType_int.get(_o+2),(int)static_QUType_int.get(_o+3)); break;
    case 3: updateStretches(); break;
    case 4: updateWidgetStretches(); break;
    default:
	return QHeader::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool QTableHeader::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: sectionSizeChanged((int)static_QUType_int.get(_o+1)); break;
    default:
	return QHeader::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool QTableHeader::qt_property( int id, int f, QVariant* v)
{
    return QHeader::qt_property( id, f, v);
}

bool QTableHeader::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
