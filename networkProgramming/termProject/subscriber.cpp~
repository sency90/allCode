#include "commonHeader.h"
#include "topic.h"

char readBuffer[BUFFER_SIZE];
char writeBuffer[BUFFER_SIZE];
int n;

struct clientInfoForSub {
    int subfd;
    int tBoxNum;
}thisSubInfo;

struct TopicMsg tMsg;

void sendRegiTopic(int connfd, char* tBoxNum) {
    //char temp_sub[2];
    //strcpy(temp_sub, SUB);

    sprintf(writeBuffer, "%d", SUB);
    writevn(connfd, writeBuffer, strlen(writeBuffer));
    writevn(connfd, tBoxNum, strlen(tBoxNum));
}

void recvMsg(int connfd) {
    if( (n = readvn(connfd, readBuffer, BUFFER_SIZE)) == 0 ) {
        printf("Disconnected from the broker\n");
        exit(1);
    }
    readBuffer[n]='\0';
    strcpy(tMsg.msg, readBuffer);

    if( (n = readvn(connfd, readBuffer, BUFFER_SIZE)) == 0 ) {
        printf("Disconnected from the broker\n");
        exit(1);
    }
    readBuffer[n]='\0';
    strcpy(tMsg.timeInfo, readBuffer);

    printf("Received Msg: %s\n", tMsg.msg);
    printf("Time Stamp: %s\n\n", tMsg.timeInfo);
}

int main(int argc, char** argv) {
    if(argc != 2) return -1;

    int n;

    char tBoxNum[TBOXNUM_INDEX_SIZE];
    strcpy(tBoxNum, argv[1]);

    struct sockaddr_in clientAddr;
    clientAddr.sin_family = AF_INET;
    clientAddr.sin_addr.s_addr = inet_addr(LOCAL_IP);//inet_aton(argv[1]);
    clientAddr.sin_port = htons(PORT);

    printf("Waiting for creating a client socket...\n");
    //int* connfd = (int*)malloc(sizeof(int));
    int connfd = socket(AF_INET, SOCK_STREAM, 0);
    printf("The socket was created successfully!!\n");

    printf("Waiting for connection to the chatting server...\n");
    int x;
    if((x=connect(connfd, (struct sockaddr*)&clientAddr, sizeof(clientAddr))) < 0 ) {
        printf("Error: Cannot connect with the server\n");
        exit(-1);
    } else {
        printf("Connection complete!\n");
        sendRegiTopic(connfd, tBoxNum);
        //clientId.tBoxNum = atoi(tBoxNum);
        char thisSubFd[FD_INDEX_SIZE];
        n = readvn(connfd, thisSubFd, sizeof(thisSubFd));
        thisSubFd[n] = '\0';
        if(strcmp(thisSubFd, "-1")) {
            err("sendRegiTopic was failed.");
            return -1; //exit this publisher
        }
        thisSubInfo.tBoxNum = atoi(tBoxNum);
        thisSubInfo.subfd = atoi(thisSubFd);

        while(1) {
            recvMsg(connfd);
        }
    }

    return 0;
}
