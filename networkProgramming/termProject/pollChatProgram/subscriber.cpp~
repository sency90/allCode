#include "commonHeader.h"
//#include "rw_vn.h"
#include "topic.h"
int thisSubId;
TopicBox tBox;

int main(int argc, char** argv) {

    struct sockaddr_in clientAddr;
    clientAddr.sin_family = AF_INET;
    //clientAddr.sin_addr.s_addr = inet_addr(argv[1]);
    clientAddr.sin_addr.s_addr = inet_addr(LOCAL_IP);
    clientAddr.sin_port = htons(PORT);

    int topicId = atoi(argv[1]);

    if(topicId == 1 || topicId == 2 || topicId == 3) {
        printf("This Publisher can publish only [%d]TOPIC\n", topicId);
    }

    printf("Wating for creating a publisher socket...\n");
    //int *connfd = (int*)malloc(sizeof(int));
    int connfd = socket(AF_INET, SOCK_STREAM, 0);
    printf("The socket was created successfully!!\n");

    printf("Waiting for connection to the broker...\n");
    if( connect(connfd, (struct sockaddr*)&clientAddr, sizeof(clientAddr)) < 0 ) {
        printf("Error: Cannot connect with the broker.\n");
        exit(-1);
    }
    else {
        printf("subscriber[%d]: connection complete!!\n", thisSubId);
        TopicBox tBox;
        thisSubId = tBox.sendTopicRegi(connfd, false, topicId);

        if(thisSubId == ID_INIT) {
            printf("Error: The broker has too many subscribers. (LIMIT: %d)\n", SUB_NUM);
            return -1;
        }

        /*
        pthread_t tid_createMsg;
        pthread_t tid_sendMsg;

        pthread_create(&tid_createMsg, NULL, createMsg, NULL);
        pthread_create(&tid_sendMsg, NULL, sendMsg, connfd);

        pthread_join(tid_createMsg, NULL);
        pthread_join(tid_sendMsg, NULL);
        */

        char tempMsg[MSG_SIZE];
        //bool hasMsg = false;

        while(1) {
            tBox.recvTopicMsgForSub(connfd);
        }
    }
    //free(connfd);
}
